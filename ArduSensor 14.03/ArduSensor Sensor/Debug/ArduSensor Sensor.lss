
ArduSensor Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  0080011e  0080011e  00000b0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b1  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b3  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000383  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000486  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002379  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	b5 c1       	rjmp	.+874    	; 0x378 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	b3 c1       	rjmp	.+870    	; 0x38c <__vector_18>
  26:	e0 c1       	rjmp	.+960    	; 0x3e8 <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e5       	ldi	r30, 0x5C	; 92
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 31       	cpi	r26, 0x1E	; 30
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e1       	ldi	r26, 0x1E	; 30
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 3f       	cpi	r26, 0xF8	; 248
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	26 d0       	rcall	.+76     	; 0xb4 <main>
  68:	f7 c4       	rjmp	.+2542   	; 0xa58 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Cap_Measure>:
}


uint16_t Cap_Measure(void)
{
	TCNT1=0;						//Reset counter
  6c:	10 92 85 00 	sts	0x0085, r1
  70:	10 92 84 00 	sts	0x0084, r1
	CLEARBIT(DDRD,PD6);				//stop charge draining
  74:	56 98       	cbi	0x0a, 6	; 10

	SETBIT(DDRD,PD5);				//Make Charge pin output
  76:	55 9a       	sbi	0x0a, 5	; 10
	TCCR1B=0b00000001;				//Start counter
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 81 00 	sts	0x0081, r24
	SETBIT(PORTD,PD5);				//Start loading the cap
  7e:	5d 9a       	sbi	0x0b, 5	; 11
	
	CLEARBIT(TIFR1,TOV1);			//Reset overflow flag
  80:	b0 98       	cbi	0x16, 0	; 22
	
	//wait until comparator registers change or counter overflows || (whileCounter >= 4000)

	while((BITVAL(ACSR, ACO) == 0) && (BITVAL(TIFR1,TOV1) == 0));		// then we wait
  82:	00 b6       	in	r0, 0x30	; 48
  84:	05 fc       	sbrc	r0, 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <Cap_Measure+0x20>
  88:	b0 9b       	sbis	0x16, 0	; 22
  8a:	fb cf       	rjmp	.-10     	; 0x82 <Cap_Measure+0x16>
	
	TCCR1B = 0x00;					//stop counter
  8c:	10 92 81 00 	sts	0x0081, r1
	CLEARBIT(PORTD,PD5);			//stop charging
  90:	5d 98       	cbi	0x0b, 5	; 11
	SETBIT(DDRD,PD6);				//Start charge draining
  92:	56 9a       	sbi	0x0a, 6	; 10
	CLEARBIT(PORTD,PD6);			//drain charge in cap	
  94:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <Cap_Measure+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <Cap_Measure+0x32>
	_delay_us(2);					//some time to get charge out before next measurement
	
        uint16_t retval = 0;
        
	if(BITVAL(TIFR1,TOV1) == 0) {
  9e:	b0 99       	sbic	0x16, 0	; 22
  a0:	05 c0       	rjmp	.+10     	; 0xac <Cap_Measure+0x40>
		retval = TCNT1;				//return time to charge
  a2:	80 91 84 00 	lds	r24, 0x0084
  a6:	90 91 85 00 	lds	r25, 0x0085
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Cap_Measure+0x44>
	CLEARBIT(PORTD,PD5);			//stop charging
	SETBIT(DDRD,PD6);				//Start charge draining
	CLEARBIT(PORTD,PD6);			//drain charge in cap	
	_delay_us(2);					//some time to get charge out before next measurement
	
        uint16_t retval = 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
        
	if(BITVAL(TIFR1,TOV1) == 0) {
		retval = TCNT1;				//return time to charge
	}
        
        SETBIT(TIFR1, TOV1);    // Clear overflow flag
  b0:	b0 9a       	sbi	0x16, 0	; 22
        return retval;
}
  b2:	08 95       	ret

000000b4 <main>:
uint16_t Cap_Measure(void);


int main(void)
{
	SETBIT(TCCR0B,CS00);			//Set timer prescale to clk
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bd       	out	0x25, r24	; 37
	SETBIT(DDRC,PC5);				//Set Xbee sleep ctrl pin as output
  ba:	3d 9a       	sbi	0x07, 5	; 7
	CLEARBIT(ACSR,ACD);				//Make sure that comparator works
  bc:	80 b7       	in	r24, 0x30	; 48
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	80 bf       	out	0x30, r24	; 48
	DIDR1=0xFF;						//Analog comparator pins are not digital inputs
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 93 7f 00 	sts	0x007F, r24
	cli();							//no interrupts whlie dealing with wdt
  c8:	f8 94       	cli
	MCUSR = 0;						//null all previous reset info
  ca:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	a8 95       	wdr
  d2:	80 91 60 00 	lds	r24, 0x0060
  d6:	88 61       	ori	r24, 0x18	; 24
  d8:	80 93 60 00 	sts	0x0060, r24
  dc:	10 92 60 00 	sts	0x0060, r1
  e0:	0f be       	out	0x3f, r0	; 63
	wdt_disable();					//kill WDT
	SETBIT(DDRD,PD2);				//Ready pullup mosfet
  e2:	52 9a       	sbi	0x0a, 2	; 10
	SETBIT(PORTD,PD2);				//pullup mosfet off
  e4:	5a 9a       	sbi	0x0b, 2	; 11
	sei();							//good place as any to enable interrupts
  e6:	78 94       	sei
	
	uart_init(UART_BAUD_SELECT(9600, F_CPU));	//Enable xbee uart at 9600
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a7 d1       	rcall	.+846    	; 0x43c <uart_init>
		
			_delay_ms(4);				//Stabilize time
	
			//Lets measure ADC values
			//First measurement. Disregard Int reference not stabilized
			ADMUX = 0b11000000;
  ee:	0f 2e       	mov	r0, r31
  f0:	fc e7       	ldi	r31, 0x7C	; 124
  f2:	cf 2e       	mov	r12, r31
  f4:	d1 2c       	mov	r13, r1
  f6:	f0 2d       	mov	r31, r0
			ADCSRA = 0b11000111;
  f8:	0a e7       	ldi	r16, 0x7A	; 122
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	0f 2e       	mov	r0, r31
  fe:	f7 ec       	ldi	r31, 0xC7	; 199
 100:	2f 2e       	mov	r2, r31
 102:	f0 2d       	mov	r31, r0
			_delay_ms(3);
			TempValueSens = ADC;
 104:	0f 2e       	mov	r0, r31
 106:	f8 e7       	ldi	r31, 0x78	; 120
 108:	ef 2e       	mov	r14, r31
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
			uint16_t tvi = TempValueI;
			uint16_t vv = VoltageValue;
			uint16_t cm = CapMeas;
			
			//more formating and uart transmit
			sprintf(buffer,"<%d;%d;%d;%d;%d;%s>\r", tvi, tvse, vv, cm, SC, id );	//temperatuuriv??rtus prose, temp v sensor, Pingev??rtus, V?rske mahtuvuse m??tmine, sendcounter.
 10e:	0f 2e       	mov	r0, r31
 110:	f4 e0       	ldi	r31, 0x04	; 4
 112:	6f 2e       	mov	r6, r31
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	7f 2e       	mov	r7, r31
 118:	f0 2d       	mov	r31, r0
		 
			//Some formating
			uint16_t tvse = TempValueSens;
			uint16_t tvi = TempValueI;
			uint16_t vv = VoltageValue;
			uint16_t cm = CapMeas;
 11a:	0f 2e       	mov	r0, r31
 11c:	f9 e2       	ldi	r31, 0x29	; 41
 11e:	8f 2e       	mov	r8, r31
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	9f 2e       	mov	r9, r31
 124:	f0 2d       	mov	r31, r0
			
			//more formating and uart transmit
			sprintf(buffer,"<%d;%d;%d;%d;%d;%s>\r", tvi, tvse, vv, cm, SC, id );	//temperatuuriv??rtus prose, temp v sensor, Pingev??rtus, V?rske mahtuvuse m??tmine, sendcounter.
 126:	0f 2e       	mov	r0, r31
 128:	f9 e0       	ldi	r31, 0x09	; 9
 12a:	4f 2e       	mov	r4, r31
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	5f 2e       	mov	r5, r31
 130:	f0 2d       	mov	r31, r0
 132:	0f 2e       	mov	r0, r31
 134:	f8 eb       	ldi	r31, 0xB8	; 184
 136:	af 2e       	mov	r10, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	bf 2e       	mov	r11, r31
 13c:	f0 2d       	mov	r31, r0

		
		//Enable wdt and go to sleep
		++sleepCounter;
		cli();
		SETBIT(WDTCSR,WDCE);		//writing to watchdog.
 13e:	c0 e6       	ldi	r28, 0x60	; 96
 140:	d0 e0       	ldi	r29, 0x00	; 0
		WDTCSR= 0b01110001;			//Watchdog conf for 8s timeout, interrupt mode
 142:	0f 2e       	mov	r0, r31
 144:	f1 e7       	ldi	r31, 0x71	; 113
 146:	3f 2e       	mov	r3, r31
 148:	f0 2d       	mov	r31, r0
	_delay_ms(1000);
*/

        while(1)
        {
		if(sleepCounter >= timeforsleep) {
 14a:	20 91 02 01 	lds	r18, 0x0102
 14e:	30 91 03 01 	lds	r19, 0x0103
 152:	80 91 00 01 	lds	r24, 0x0100
 156:	90 91 01 01 	lds	r25, 0x0101
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	08 f4       	brcc	.+2      	; 0x162 <main+0xae>
 160:	ed c0       	rjmp	.+474    	; 0x33c <__stack+0x3d>
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	a8 95       	wdr
 168:	80 91 60 00 	lds	r24, 0x0060
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	80 93 60 00 	sts	0x0060, r24
 172:	10 92 60 00 	sts	0x0060, r1
 176:	0f be       	out	0x3f, r0	; 63
			wdt_disable();				//no need for wdt here
			
			CLEARBIT(PORTC,PC5);		//Wake up xbee (also needs some time) 
 178:	45 98       	cbi	0x08, 5	; 8
			CLEARBIT(PORTD,PD2);		//Start peripherals under mosfet
 17a:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e7       	ldi	r24, 0x7F	; 127
 17e:	9e e3       	ldi	r25, 0x3E	; 62
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xcc>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xd2>
 186:	00 00       	nop
		
			_delay_ms(4);				//Stabilize time
	
			//Lets measure ADC values
			//First measurement. Disregard Int reference not stabilized
			ADMUX = 0b11000000;
 188:	20 ec       	ldi	r18, 0xC0	; 192
 18a:	f6 01       	movw	r30, r12
 18c:	20 83       	st	Z, r18
			ADCSRA = 0b11000111;
 18e:	f8 01       	movw	r30, r16
 190:	20 82       	st	Z, r2
 192:	8f ed       	ldi	r24, 0xDF	; 223
 194:	9e e2       	ldi	r25, 0x2E	; 46
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xe2>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xe8>
 19c:	00 00       	nop
			_delay_ms(3);
			TempValueSens = ADC;
 19e:	f7 01       	movw	r30, r14
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	90 93 32 01 	sts	0x0132, r25
 1a8:	80 93 31 01 	sts	0x0131, r24
		
			ADMUX = 0b11000000;
 1ac:	f6 01       	movw	r30, r12
 1ae:	20 83       	st	Z, r18
			ADCSRA = 0b11000111;
 1b0:	f8 01       	movw	r30, r16
 1b2:	20 82       	st	Z, r2
 1b4:	8f ed       	ldi	r24, 0xDF	; 223
 1b6:	9e e2       	ldi	r25, 0x2E	; 46
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x104>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x10a>
 1be:	00 00       	nop
			_delay_ms(3);
			TempValueSens = ADC;
 1c0:	f7 01       	movw	r30, r14
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	90 93 32 01 	sts	0x0132, r25
 1ca:	80 93 31 01 	sts	0x0131, r24
		
			ADMUX = 0b11001000;
 1ce:	28 ec       	ldi	r18, 0xC8	; 200
 1d0:	f6 01       	movw	r30, r12
 1d2:	20 83       	st	Z, r18
			ADCSRA = 0b11000111;
 1d4:	f8 01       	movw	r30, r16
 1d6:	20 82       	st	Z, r2
 1d8:	8f ed       	ldi	r24, 0xDF	; 223
 1da:	9e e2       	ldi	r25, 0x2E	; 46
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x128>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x12e>
 1e2:	00 00       	nop
			_delay_ms(3);
			TempValueI = ADC;
 1e4:	f7 01       	movw	r30, r14
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	90 93 30 01 	sts	0x0130, r25
 1ee:	80 93 2f 01 	sts	0x012F, r24
		
			ADMUX = 0b11000001;
 1f2:	21 ec       	ldi	r18, 0xC1	; 193
 1f4:	f6 01       	movw	r30, r12
 1f6:	20 83       	st	Z, r18
			ADCSRA = 0b11000111;
 1f8:	f8 01       	movw	r30, r16
 1fa:	20 82       	st	Z, r2
 1fc:	8f ed       	ldi	r24, 0xDF	; 223
 1fe:	9e e2       	ldi	r25, 0x2E	; 46
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x14c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x152>
 206:	00 00       	nop
			_delay_ms(3);
			VoltageValue = ADC;
 208:	f7 01       	movw	r30, r14
 20a:	80 81       	ld	r24, Z
 20c:	91 81       	ldd	r25, Z+1	; 0x01
 20e:	90 93 2e 01 	sts	0x012E, r25
 212:	80 93 2d 01 	sts	0x012D, r24
			CLEARBIT(ADCSRA,ADEN);
 216:	f8 01       	movw	r30, r16
 218:	80 81       	ld	r24, Z
 21a:	8f 77       	andi	r24, 0x7F	; 127
 21c:	80 83       	st	Z, r24
			
			//Take some cap measures
			CapMeasA = Cap_Measure();
 21e:	26 df       	rcall	.-436    	; 0x6c <Cap_Measure>
 220:	90 93 27 01 	sts	0x0127, r25
 224:	80 93 26 01 	sts	0x0126, r24
			CapMeasB = Cap_Measure();
 228:	21 df       	rcall	.-446    	; 0x6c <Cap_Measure>
 22a:	90 93 25 01 	sts	0x0125, r25
 22e:	80 93 24 01 	sts	0x0124, r24
			CapMeasC = Cap_Measure();
 232:	1c df       	rcall	.-456    	; 0x6c <Cap_Measure>
 234:	90 93 23 01 	sts	0x0123, r25
 238:	80 93 22 01 	sts	0x0122, r24
			CapMeasD = Cap_Measure();
 23c:	17 df       	rcall	.-466    	; 0x6c <Cap_Measure>
 23e:	90 93 21 01 	sts	0x0121, r25
 242:	80 93 20 01 	sts	0x0120, r24
			CapMeasE = Cap_Measure();
 246:	12 df       	rcall	.-476    	; 0x6c <Cap_Measure>
 248:	90 93 1f 01 	sts	0x011F, r25
 24c:	80 93 1e 01 	sts	0x011E, r24
			
			//Calculate average
			CapMeas =  (CapMeasA + CapMeasB + CapMeasC + CapMeasD + CapMeasE)/5;
 250:	40 91 24 01 	lds	r20, 0x0124
 254:	50 91 25 01 	lds	r21, 0x0125
 258:	20 91 26 01 	lds	r18, 0x0126
 25c:	30 91 27 01 	lds	r19, 0x0127
 260:	24 0f       	add	r18, r20
 262:	35 1f       	adc	r19, r21
 264:	40 91 22 01 	lds	r20, 0x0122
 268:	50 91 23 01 	lds	r21, 0x0123
 26c:	24 0f       	add	r18, r20
 26e:	35 1f       	adc	r19, r21
 270:	40 91 20 01 	lds	r20, 0x0120
 274:	50 91 21 01 	lds	r21, 0x0121
 278:	24 0f       	add	r18, r20
 27a:	35 1f       	adc	r19, r21
 27c:	28 0f       	add	r18, r24
 27e:	39 1f       	adc	r19, r25
 280:	ad ec       	ldi	r26, 0xCD	; 205
 282:	bc ec       	ldi	r27, 0xCC	; 204
 284:	17 d1       	rcall	.+558    	; 0x4b4 <__umulhisi3>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	a0 e0       	ldi	r26, 0x00	; 0
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	80 93 29 01 	sts	0x0129, r24
 296:	90 93 2a 01 	sts	0x012A, r25
 29a:	a0 93 2b 01 	sts	0x012B, r26
 29e:	b0 93 2c 01 	sts	0x012C, r27
		
			SETBIT(PORTD,PD2);			//Un initalize peripheral mosfet
 2a2:	5a 9a       	sbi	0x0b, 2	; 11
			uint16_t tvi = TempValueI;
			uint16_t vv = VoltageValue;
			uint16_t cm = CapMeas;
			
			//more formating and uart transmit
			sprintf(buffer,"<%d;%d;%d;%d;%d;%s>\r", tvi, tvse, vv, cm, SC, id );	//temperatuuriv??rtus prose, temp v sensor, Pingev??rtus, V?rske mahtuvuse m??tmine, sendcounter.
 2a4:	7f 92       	push	r7
 2a6:	6f 92       	push	r6
 2a8:	80 91 28 01 	lds	r24, 0x0128
 2ac:	1f 92       	push	r1
 2ae:	8f 93       	push	r24
 2b0:	f4 01       	movw	r30, r8
 2b2:	81 81       	ldd	r24, Z+1	; 0x01
 2b4:	8f 93       	push	r24
 2b6:	80 81       	ld	r24, Z
 2b8:	8f 93       	push	r24
 2ba:	80 91 2e 01 	lds	r24, 0x012E
 2be:	8f 93       	push	r24
 2c0:	80 91 2d 01 	lds	r24, 0x012D
 2c4:	8f 93       	push	r24
 2c6:	80 91 32 01 	lds	r24, 0x0132
 2ca:	8f 93       	push	r24
 2cc:	80 91 31 01 	lds	r24, 0x0131
 2d0:	8f 93       	push	r24
 2d2:	80 91 30 01 	lds	r24, 0x0130
 2d6:	8f 93       	push	r24
 2d8:	80 91 2f 01 	lds	r24, 0x012F
 2dc:	8f 93       	push	r24
 2de:	5f 92       	push	r5
 2e0:	4f 92       	push	r4
 2e2:	bf 92       	push	r11
 2e4:	af 92       	push	r10
 2e6:	f2 d0       	rcall	.+484    	; 0x4cc <sprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	fa e0       	ldi	r31, 0x0A	; 10
 2ea:	fa 95       	dec	r31
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x236>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x23c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	8f e4       	ldi	r24, 0x4F	; 79
 2f4:	93 ec       	ldi	r25, 0xC3	; 195
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x242>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <__stack+0x1>
 300:	00 00       	nop
			_delay_us(2);
			//Enter delay as needed for xbee wake up completion or check if xbee is awaken
			_delay_ms(4000);
			uart_puts(buffer);			//Sending Dataaaa
 302:	c5 01       	movw	r24, r10
 304:	c9 d0       	rcall	.+402    	; 0x498 <uart_puts>
			++SC;						//We are counting times we have sent with xbee
 306:	80 91 28 01 	lds	r24, 0x0128
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 28 01 	sts	0x0128, r24
 310:	ef ef       	ldi	r30, 0xFF	; 255
 312:	f3 ed       	ldi	r31, 0xD3	; 211
 314:	20 e3       	ldi	r18, 0x30	; 48
 316:	e1 50       	subi	r30, 0x01	; 1
 318:	f0 40       	sbci	r31, 0x00	; 0
 31a:	20 40       	sbci	r18, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <__stack+0x17>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <__stack+0x21>
 320:	00 00       	nop

			_delay_ms(1000);			//wait for xbee transmit
			sleepCounter = 0;			//since we had our beauty sleep
 322:	10 92 03 01 	sts	0x0103, r1
 326:	10 92 02 01 	sts	0x0102, r1
			SETBIT(PORTC,PC5);			//Xbee time to sleep
 32a:	45 9a       	sbi	0x08, 5	; 8
 32c:	8d b7       	in	r24, 0x3d	; 61
 32e:	9e b7       	in	r25, 0x3e	; 62
 330:	40 96       	adiw	r24, 0x10	; 16
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	9e bf       	out	0x3e, r25	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	8d bf       	out	0x3d, r24	; 61
		
	

		
		//Enable wdt and go to sleep
		++sleepCounter;
 33c:	80 91 02 01 	lds	r24, 0x0102
 340:	90 91 03 01 	lds	r25, 0x0103
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 03 01 	sts	0x0103, r25
 34a:	80 93 02 01 	sts	0x0102, r24
		cli();
 34e:	f8 94       	cli
		SETBIT(WDTCSR,WDCE);		//writing to watchdog.
 350:	88 81       	ld	r24, Y
 352:	80 61       	ori	r24, 0x10	; 16
 354:	88 83       	st	Y, r24
		WDTCSR= 0b01110001;			//Watchdog conf for 8s timeout, interrupt mode
 356:	38 82       	st	Y, r3
		WDTCSR= 0b01110001;	
 358:	38 82       	st	Y, r3
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	81 7f       	andi	r24, 0xF1	; 241
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 362:	83 b7       	in	r24, 0x33	; 51
 364:	81 60       	ori	r24, 0x01	; 1
 366:	83 bf       	out	0x33, r24	; 51
		sleep_bod_disable();
 368:	85 b7       	in	r24, 0x35	; 53
 36a:	80 66       	ori	r24, 0x60	; 96
 36c:	85 bf       	out	0x35, r24	; 53
 36e:	8f 7d       	andi	r24, 0xDF	; 223
 370:	85 bf       	out	0x35, r24	; 53
		sei();
 372:	78 94       	sei
		sleep_cpu();			 
 374:	88 95       	sleep
        }
 376:	e9 ce       	rjmp	.-558    	; 0x14a <main+0x96>

00000378 <__vector_6>:
        SETBIT(TIFR1, TOV1);    // Clear overflow flag
        return retval;
}

ISR(WDT_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
	//_delay_us(1);	//this does not do else than wakes up CPU
}
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 3a0:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 3a4:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 3a8:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 3aa:	e0 91 35 01 	lds	r30, 0x0135
 3ae:	ef 5f       	subi	r30, 0xFF	; 255
 3b0:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
 3b2:	90 91 34 01 	lds	r25, 0x0134
 3b6:	e9 17       	cp	r30, r25
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 3ba:	e0 93 35 01 	sts	0x0135, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e8 5c       	subi	r30, 0xC8	; 200
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	20 83       	st	Z, r18
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 3ca:	90 91 33 01 	lds	r25, 0x0133
 3ce:	89 2b       	or	r24, r25
 3d0:	80 93 33 01 	sts	0x0133, r24
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 3fa:	90 91 37 01 	lds	r25, 0x0137
 3fe:	80 91 36 01 	lds	r24, 0x0136
 402:	98 17       	cp	r25, r24
 404:	69 f0       	breq	.+26     	; 0x420 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 406:	e0 91 36 01 	lds	r30, 0x0136
 40a:	ef 5f       	subi	r30, 0xFF	; 255
 40c:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 40e:	e0 93 36 01 	sts	0x0136, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	e8 58       	subi	r30, 0x88	; 136
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 81       	ld	r24, Z
 41a:	80 93 c6 00 	sts	0x00C6, r24
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 420:	e1 ec       	ldi	r30, 0xC1	; 193
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	8f 7d       	andi	r24, 0xDF	; 223
 428:	80 83       	st	Z, r24
    }
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 43c:	10 92 37 01 	sts	0x0137, r1
    UART_TxTail = 0;
 440:	10 92 36 01 	sts	0x0136, r1
    UART_RxHead = 0;
 444:	10 92 35 01 	sts	0x0135, r1
    UART_RxTail = 0;
 448:	10 92 34 01 	sts	0x0134, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 44c:	99 23       	and	r25, r25
 44e:	24 f4       	brge	.+8      	; 0x458 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 456:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 458:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 45c:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 460:	88 e9       	ldi	r24, 0x98	; 152
 462:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	80 93 c2 00 	sts	0x00C2, r24
 46c:	08 95       	ret

0000046e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 46e:	20 91 37 01 	lds	r18, 0x0137
 472:	2f 5f       	subi	r18, 0xFF	; 255
 474:	2f 73       	andi	r18, 0x3F	; 63
    
    while ( tmphead == UART_TxTail ){
 476:	90 91 36 01 	lds	r25, 0x0136
 47a:	29 17       	cp	r18, r25
 47c:	e1 f3       	breq	.-8      	; 0x476 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 47e:	e2 2f       	mov	r30, r18
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	e8 58       	subi	r30, 0x88	; 136
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 488:	20 93 37 01 	sts	0x0137, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 48c:	e1 ec       	ldi	r30, 0xC1	; 193
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	80 62       	ori	r24, 0x20	; 32
 494:	80 83       	st	Z, r24
 496:	08 95       	ret

00000498 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
    while (*s) 
 49e:	88 81       	ld	r24, Y
 4a0:	88 23       	and	r24, r24
 4a2:	29 f0       	breq	.+10     	; 0x4ae <uart_puts+0x16>
 4a4:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 4a6:	e3 df       	rcall	.-58     	; 0x46e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 4a8:	89 91       	ld	r24, Y+
 4aa:	81 11       	cpse	r24, r1
 4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <__umulhisi3>:
 4b4:	a2 9f       	mul	r26, r18
 4b6:	b0 01       	movw	r22, r0
 4b8:	b3 9f       	mul	r27, r19
 4ba:	c0 01       	movw	r24, r0
 4bc:	a3 9f       	mul	r26, r19
 4be:	01 d0       	rcall	.+2      	; 0x4c2 <__umulhisi3+0xe>
 4c0:	b2 9f       	mul	r27, r18
 4c2:	70 0d       	add	r23, r0
 4c4:	81 1d       	adc	r24, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	91 1d       	adc	r25, r1
 4ca:	08 95       	ret

000004cc <sprintf>:
 4cc:	ae e0       	ldi	r26, 0x0E	; 14
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	eb e6       	ldi	r30, 0x6B	; 107
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	98 c2       	rjmp	.+1328   	; 0xa06 <__prologue_saves__+0x1c>
 4d6:	0d 89       	ldd	r16, Y+21	; 0x15
 4d8:	1e 89       	ldd	r17, Y+22	; 0x16
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	8c 83       	std	Y+4, r24	; 0x04
 4de:	1a 83       	std	Y+2, r17	; 0x02
 4e0:	09 83       	std	Y+1, r16	; 0x01
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	9f e7       	ldi	r25, 0x7F	; 127
 4e6:	9e 83       	std	Y+6, r25	; 0x06
 4e8:	8d 83       	std	Y+5, r24	; 0x05
 4ea:	ae 01       	movw	r20, r28
 4ec:	47 5e       	subi	r20, 0xE7	; 231
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	6f 89       	ldd	r22, Y+23	; 0x17
 4f2:	78 8d       	ldd	r23, Y+24	; 0x18
 4f4:	ce 01       	movw	r24, r28
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	09 d0       	rcall	.+18     	; 0x50c <vfprintf>
 4fa:	2f 81       	ldd	r18, Y+7	; 0x07
 4fc:	38 85       	ldd	r19, Y+8	; 0x08
 4fe:	f8 01       	movw	r30, r16
 500:	e2 0f       	add	r30, r18
 502:	f3 1f       	adc	r31, r19
 504:	10 82       	st	Z, r1
 506:	2e 96       	adiw	r28, 0x0e	; 14
 508:	e4 e0       	ldi	r30, 0x04	; 4
 50a:	99 c2       	rjmp	.+1330   	; 0xa3e <__epilogue_restores__+0x1c>

0000050c <vfprintf>:
 50c:	ac e0       	ldi	r26, 0x0C	; 12
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	eb e8       	ldi	r30, 0x8B	; 139
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	6a c2       	rjmp	.+1236   	; 0x9ea <__prologue_saves__>
 516:	7c 01       	movw	r14, r24
 518:	6b 01       	movw	r12, r22
 51a:	8a 01       	movw	r16, r20
 51c:	fc 01       	movw	r30, r24
 51e:	17 82       	std	Z+7, r1	; 0x07
 520:	16 82       	std	Z+6, r1	; 0x06
 522:	83 81       	ldd	r24, Z+3	; 0x03
 524:	81 ff       	sbrs	r24, 1
 526:	b0 c1       	rjmp	.+864    	; 0x888 <vfprintf+0x37c>
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	4c 01       	movw	r8, r24
 52e:	f7 01       	movw	r30, r14
 530:	93 81       	ldd	r25, Z+3	; 0x03
 532:	f6 01       	movw	r30, r12
 534:	93 fd       	sbrc	r25, 3
 536:	85 91       	lpm	r24, Z+
 538:	93 ff       	sbrs	r25, 3
 53a:	81 91       	ld	r24, Z+
 53c:	6f 01       	movw	r12, r30
 53e:	88 23       	and	r24, r24
 540:	09 f4       	brne	.+2      	; 0x544 <vfprintf+0x38>
 542:	9e c1       	rjmp	.+828    	; 0x880 <vfprintf+0x374>
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	39 f4       	brne	.+14     	; 0x556 <vfprintf+0x4a>
 548:	93 fd       	sbrc	r25, 3
 54a:	85 91       	lpm	r24, Z+
 54c:	93 ff       	sbrs	r25, 3
 54e:	81 91       	ld	r24, Z+
 550:	6f 01       	movw	r12, r30
 552:	85 32       	cpi	r24, 0x25	; 37
 554:	21 f4       	brne	.+8      	; 0x55e <vfprintf+0x52>
 556:	b7 01       	movw	r22, r14
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	b1 d1       	rcall	.+866    	; 0x8be <fputc>
 55c:	e8 cf       	rjmp	.-48     	; 0x52e <vfprintf+0x22>
 55e:	51 2c       	mov	r5, r1
 560:	31 2c       	mov	r3, r1
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	20 32       	cpi	r18, 0x20	; 32
 566:	a0 f4       	brcc	.+40     	; 0x590 <vfprintf+0x84>
 568:	8b 32       	cpi	r24, 0x2B	; 43
 56a:	69 f0       	breq	.+26     	; 0x586 <vfprintf+0x7a>
 56c:	30 f4       	brcc	.+12     	; 0x57a <vfprintf+0x6e>
 56e:	80 32       	cpi	r24, 0x20	; 32
 570:	59 f0       	breq	.+22     	; 0x588 <vfprintf+0x7c>
 572:	83 32       	cpi	r24, 0x23	; 35
 574:	69 f4       	brne	.+26     	; 0x590 <vfprintf+0x84>
 576:	20 61       	ori	r18, 0x10	; 16
 578:	2c c0       	rjmp	.+88     	; 0x5d2 <vfprintf+0xc6>
 57a:	8d 32       	cpi	r24, 0x2D	; 45
 57c:	39 f0       	breq	.+14     	; 0x58c <vfprintf+0x80>
 57e:	80 33       	cpi	r24, 0x30	; 48
 580:	39 f4       	brne	.+14     	; 0x590 <vfprintf+0x84>
 582:	21 60       	ori	r18, 0x01	; 1
 584:	26 c0       	rjmp	.+76     	; 0x5d2 <vfprintf+0xc6>
 586:	22 60       	ori	r18, 0x02	; 2
 588:	24 60       	ori	r18, 0x04	; 4
 58a:	23 c0       	rjmp	.+70     	; 0x5d2 <vfprintf+0xc6>
 58c:	28 60       	ori	r18, 0x08	; 8
 58e:	21 c0       	rjmp	.+66     	; 0x5d2 <vfprintf+0xc6>
 590:	27 fd       	sbrc	r18, 7
 592:	27 c0       	rjmp	.+78     	; 0x5e2 <vfprintf+0xd6>
 594:	30 ed       	ldi	r19, 0xD0	; 208
 596:	38 0f       	add	r19, r24
 598:	3a 30       	cpi	r19, 0x0A	; 10
 59a:	78 f4       	brcc	.+30     	; 0x5ba <vfprintf+0xae>
 59c:	26 ff       	sbrs	r18, 6
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <vfprintf+0xa0>
 5a0:	fa e0       	ldi	r31, 0x0A	; 10
 5a2:	5f 9e       	mul	r5, r31
 5a4:	30 0d       	add	r19, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	53 2e       	mov	r5, r19
 5aa:	13 c0       	rjmp	.+38     	; 0x5d2 <vfprintf+0xc6>
 5ac:	8a e0       	ldi	r24, 0x0A	; 10
 5ae:	38 9e       	mul	r3, r24
 5b0:	30 0d       	add	r19, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	33 2e       	mov	r3, r19
 5b6:	20 62       	ori	r18, 0x20	; 32
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <vfprintf+0xc6>
 5ba:	8e 32       	cpi	r24, 0x2E	; 46
 5bc:	21 f4       	brne	.+8      	; 0x5c6 <vfprintf+0xba>
 5be:	26 fd       	sbrc	r18, 6
 5c0:	5f c1       	rjmp	.+702    	; 0x880 <vfprintf+0x374>
 5c2:	20 64       	ori	r18, 0x40	; 64
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <vfprintf+0xc6>
 5c6:	8c 36       	cpi	r24, 0x6C	; 108
 5c8:	11 f4       	brne	.+4      	; 0x5ce <vfprintf+0xc2>
 5ca:	20 68       	ori	r18, 0x80	; 128
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <vfprintf+0xc6>
 5ce:	88 36       	cpi	r24, 0x68	; 104
 5d0:	41 f4       	brne	.+16     	; 0x5e2 <vfprintf+0xd6>
 5d2:	f6 01       	movw	r30, r12
 5d4:	93 fd       	sbrc	r25, 3
 5d6:	85 91       	lpm	r24, Z+
 5d8:	93 ff       	sbrs	r25, 3
 5da:	81 91       	ld	r24, Z+
 5dc:	6f 01       	movw	r12, r30
 5de:	81 11       	cpse	r24, r1
 5e0:	c1 cf       	rjmp	.-126    	; 0x564 <vfprintf+0x58>
 5e2:	98 2f       	mov	r25, r24
 5e4:	9f 7d       	andi	r25, 0xDF	; 223
 5e6:	95 54       	subi	r25, 0x45	; 69
 5e8:	93 30       	cpi	r25, 0x03	; 3
 5ea:	28 f4       	brcc	.+10     	; 0x5f6 <vfprintf+0xea>
 5ec:	0c 5f       	subi	r16, 0xFC	; 252
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	ff e3       	ldi	r31, 0x3F	; 63
 5f2:	f9 83       	std	Y+1, r31	; 0x01
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <vfprintf+0x104>
 5f6:	83 36       	cpi	r24, 0x63	; 99
 5f8:	31 f0       	breq	.+12     	; 0x606 <vfprintf+0xfa>
 5fa:	83 37       	cpi	r24, 0x73	; 115
 5fc:	71 f0       	breq	.+28     	; 0x61a <vfprintf+0x10e>
 5fe:	83 35       	cpi	r24, 0x53	; 83
 600:	09 f0       	breq	.+2      	; 0x604 <vfprintf+0xf8>
 602:	57 c0       	rjmp	.+174    	; 0x6b2 <vfprintf+0x1a6>
 604:	21 c0       	rjmp	.+66     	; 0x648 <vfprintf+0x13c>
 606:	f8 01       	movw	r30, r16
 608:	80 81       	ld	r24, Z
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	0e 5f       	subi	r16, 0xFE	; 254
 60e:	1f 4f       	sbci	r17, 0xFF	; 255
 610:	44 24       	eor	r4, r4
 612:	43 94       	inc	r4
 614:	51 2c       	mov	r5, r1
 616:	54 01       	movw	r10, r8
 618:	14 c0       	rjmp	.+40     	; 0x642 <vfprintf+0x136>
 61a:	38 01       	movw	r6, r16
 61c:	f2 e0       	ldi	r31, 0x02	; 2
 61e:	6f 0e       	add	r6, r31
 620:	71 1c       	adc	r7, r1
 622:	f8 01       	movw	r30, r16
 624:	a0 80       	ld	r10, Z
 626:	b1 80       	ldd	r11, Z+1	; 0x01
 628:	26 ff       	sbrs	r18, 6
 62a:	03 c0       	rjmp	.+6      	; 0x632 <vfprintf+0x126>
 62c:	65 2d       	mov	r22, r5
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <vfprintf+0x12a>
 632:	6f ef       	ldi	r22, 0xFF	; 255
 634:	7f ef       	ldi	r23, 0xFF	; 255
 636:	c5 01       	movw	r24, r10
 638:	2c 87       	std	Y+12, r18	; 0x0c
 63a:	36 d1       	rcall	.+620    	; 0x8a8 <strnlen>
 63c:	2c 01       	movw	r4, r24
 63e:	83 01       	movw	r16, r6
 640:	2c 85       	ldd	r18, Y+12	; 0x0c
 642:	2f 77       	andi	r18, 0x7F	; 127
 644:	22 2e       	mov	r2, r18
 646:	16 c0       	rjmp	.+44     	; 0x674 <vfprintf+0x168>
 648:	38 01       	movw	r6, r16
 64a:	f2 e0       	ldi	r31, 0x02	; 2
 64c:	6f 0e       	add	r6, r31
 64e:	71 1c       	adc	r7, r1
 650:	f8 01       	movw	r30, r16
 652:	a0 80       	ld	r10, Z
 654:	b1 80       	ldd	r11, Z+1	; 0x01
 656:	26 ff       	sbrs	r18, 6
 658:	03 c0       	rjmp	.+6      	; 0x660 <vfprintf+0x154>
 65a:	65 2d       	mov	r22, r5
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0x158>
 660:	6f ef       	ldi	r22, 0xFF	; 255
 662:	7f ef       	ldi	r23, 0xFF	; 255
 664:	c5 01       	movw	r24, r10
 666:	2c 87       	std	Y+12, r18	; 0x0c
 668:	14 d1       	rcall	.+552    	; 0x892 <strnlen_P>
 66a:	2c 01       	movw	r4, r24
 66c:	2c 85       	ldd	r18, Y+12	; 0x0c
 66e:	20 68       	ori	r18, 0x80	; 128
 670:	22 2e       	mov	r2, r18
 672:	83 01       	movw	r16, r6
 674:	23 fc       	sbrc	r2, 3
 676:	19 c0       	rjmp	.+50     	; 0x6aa <vfprintf+0x19e>
 678:	83 2d       	mov	r24, r3
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	48 16       	cp	r4, r24
 67e:	59 06       	cpc	r5, r25
 680:	a0 f4       	brcc	.+40     	; 0x6aa <vfprintf+0x19e>
 682:	b7 01       	movw	r22, r14
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	1a d1       	rcall	.+564    	; 0x8be <fputc>
 68a:	3a 94       	dec	r3
 68c:	f5 cf       	rjmp	.-22     	; 0x678 <vfprintf+0x16c>
 68e:	f5 01       	movw	r30, r10
 690:	27 fc       	sbrc	r2, 7
 692:	85 91       	lpm	r24, Z+
 694:	27 fe       	sbrs	r2, 7
 696:	81 91       	ld	r24, Z+
 698:	5f 01       	movw	r10, r30
 69a:	b7 01       	movw	r22, r14
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0f d1       	rcall	.+542    	; 0x8be <fputc>
 6a0:	31 10       	cpse	r3, r1
 6a2:	3a 94       	dec	r3
 6a4:	f1 e0       	ldi	r31, 0x01	; 1
 6a6:	4f 1a       	sub	r4, r31
 6a8:	51 08       	sbc	r5, r1
 6aa:	41 14       	cp	r4, r1
 6ac:	51 04       	cpc	r5, r1
 6ae:	79 f7       	brne	.-34     	; 0x68e <vfprintf+0x182>
 6b0:	de c0       	rjmp	.+444    	; 0x86e <vfprintf+0x362>
 6b2:	84 36       	cpi	r24, 0x64	; 100
 6b4:	11 f0       	breq	.+4      	; 0x6ba <vfprintf+0x1ae>
 6b6:	89 36       	cpi	r24, 0x69	; 105
 6b8:	31 f5       	brne	.+76     	; 0x706 <vfprintf+0x1fa>
 6ba:	f8 01       	movw	r30, r16
 6bc:	27 ff       	sbrs	r18, 7
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <vfprintf+0x1c2>
 6c0:	60 81       	ld	r22, Z
 6c2:	71 81       	ldd	r23, Z+1	; 0x01
 6c4:	82 81       	ldd	r24, Z+2	; 0x02
 6c6:	93 81       	ldd	r25, Z+3	; 0x03
 6c8:	0c 5f       	subi	r16, 0xFC	; 252
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <vfprintf+0x1d2>
 6ce:	60 81       	ld	r22, Z
 6d0:	71 81       	ldd	r23, Z+1	; 0x01
 6d2:	07 2e       	mov	r0, r23
 6d4:	00 0c       	add	r0, r0
 6d6:	88 0b       	sbc	r24, r24
 6d8:	99 0b       	sbc	r25, r25
 6da:	0e 5f       	subi	r16, 0xFE	; 254
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	2f 76       	andi	r18, 0x6F	; 111
 6e0:	72 2e       	mov	r7, r18
 6e2:	97 ff       	sbrs	r25, 7
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <vfprintf+0x1ec>
 6e6:	90 95       	com	r25
 6e8:	80 95       	com	r24
 6ea:	70 95       	com	r23
 6ec:	61 95       	neg	r22
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	20 68       	ori	r18, 0x80	; 128
 6f6:	72 2e       	mov	r7, r18
 6f8:	2a e0       	ldi	r18, 0x0A	; 10
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	a4 01       	movw	r20, r8
 6fe:	17 d1       	rcall	.+558    	; 0x92e <__ultoa_invert>
 700:	a8 2e       	mov	r10, r24
 702:	a8 18       	sub	r10, r8
 704:	43 c0       	rjmp	.+134    	; 0x78c <vfprintf+0x280>
 706:	85 37       	cpi	r24, 0x75	; 117
 708:	29 f4       	brne	.+10     	; 0x714 <vfprintf+0x208>
 70a:	2f 7e       	andi	r18, 0xEF	; 239
 70c:	b2 2e       	mov	r11, r18
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	25 c0       	rjmp	.+74     	; 0x75e <vfprintf+0x252>
 714:	f2 2f       	mov	r31, r18
 716:	f9 7f       	andi	r31, 0xF9	; 249
 718:	bf 2e       	mov	r11, r31
 71a:	8f 36       	cpi	r24, 0x6F	; 111
 71c:	c1 f0       	breq	.+48     	; 0x74e <vfprintf+0x242>
 71e:	18 f4       	brcc	.+6      	; 0x726 <vfprintf+0x21a>
 720:	88 35       	cpi	r24, 0x58	; 88
 722:	79 f0       	breq	.+30     	; 0x742 <vfprintf+0x236>
 724:	ad c0       	rjmp	.+346    	; 0x880 <vfprintf+0x374>
 726:	80 37       	cpi	r24, 0x70	; 112
 728:	19 f0       	breq	.+6      	; 0x730 <vfprintf+0x224>
 72a:	88 37       	cpi	r24, 0x78	; 120
 72c:	21 f0       	breq	.+8      	; 0x736 <vfprintf+0x22a>
 72e:	a8 c0       	rjmp	.+336    	; 0x880 <vfprintf+0x374>
 730:	2f 2f       	mov	r18, r31
 732:	20 61       	ori	r18, 0x10	; 16
 734:	b2 2e       	mov	r11, r18
 736:	b4 fe       	sbrs	r11, 4
 738:	0d c0       	rjmp	.+26     	; 0x754 <vfprintf+0x248>
 73a:	8b 2d       	mov	r24, r11
 73c:	84 60       	ori	r24, 0x04	; 4
 73e:	b8 2e       	mov	r11, r24
 740:	09 c0       	rjmp	.+18     	; 0x754 <vfprintf+0x248>
 742:	24 ff       	sbrs	r18, 4
 744:	0a c0       	rjmp	.+20     	; 0x75a <vfprintf+0x24e>
 746:	9f 2f       	mov	r25, r31
 748:	96 60       	ori	r25, 0x06	; 6
 74a:	b9 2e       	mov	r11, r25
 74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x24e>
 74e:	28 e0       	ldi	r18, 0x08	; 8
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	05 c0       	rjmp	.+10     	; 0x75e <vfprintf+0x252>
 754:	20 e1       	ldi	r18, 0x10	; 16
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x252>
 75a:	20 e1       	ldi	r18, 0x10	; 16
 75c:	32 e0       	ldi	r19, 0x02	; 2
 75e:	f8 01       	movw	r30, r16
 760:	b7 fe       	sbrs	r11, 7
 762:	07 c0       	rjmp	.+14     	; 0x772 <vfprintf+0x266>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	82 81       	ldd	r24, Z+2	; 0x02
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x272>
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	a4 01       	movw	r20, r8
 780:	d6 d0       	rcall	.+428    	; 0x92e <__ultoa_invert>
 782:	a8 2e       	mov	r10, r24
 784:	a8 18       	sub	r10, r8
 786:	fb 2d       	mov	r31, r11
 788:	ff 77       	andi	r31, 0x7F	; 127
 78a:	7f 2e       	mov	r7, r31
 78c:	76 fe       	sbrs	r7, 6
 78e:	0b c0       	rjmp	.+22     	; 0x7a6 <vfprintf+0x29a>
 790:	37 2d       	mov	r19, r7
 792:	3e 7f       	andi	r19, 0xFE	; 254
 794:	a5 14       	cp	r10, r5
 796:	50 f4       	brcc	.+20     	; 0x7ac <vfprintf+0x2a0>
 798:	74 fe       	sbrs	r7, 4
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <vfprintf+0x2a4>
 79c:	72 fc       	sbrc	r7, 2
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x2a4>
 7a0:	37 2d       	mov	r19, r7
 7a2:	3e 7e       	andi	r19, 0xEE	; 238
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <vfprintf+0x2a4>
 7a6:	ba 2c       	mov	r11, r10
 7a8:	37 2d       	mov	r19, r7
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x2a6>
 7ac:	ba 2c       	mov	r11, r10
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <vfprintf+0x2a6>
 7b0:	b5 2c       	mov	r11, r5
 7b2:	34 ff       	sbrs	r19, 4
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x2c4>
 7b6:	fe 01       	movw	r30, r28
 7b8:	ea 0d       	add	r30, r10
 7ba:	f1 1d       	adc	r31, r1
 7bc:	80 81       	ld	r24, Z
 7be:	80 33       	cpi	r24, 0x30	; 48
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <vfprintf+0x2ba>
 7c2:	39 7e       	andi	r19, 0xE9	; 233
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <vfprintf+0x2cc>
 7c6:	32 ff       	sbrs	r19, 2
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x2ca>
 7ca:	b3 94       	inc	r11
 7cc:	b3 94       	inc	r11
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <vfprintf+0x2cc>
 7d0:	83 2f       	mov	r24, r19
 7d2:	86 78       	andi	r24, 0x86	; 134
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <vfprintf+0x2cc>
 7d6:	b3 94       	inc	r11
 7d8:	33 fd       	sbrc	r19, 3
 7da:	12 c0       	rjmp	.+36     	; 0x800 <vfprintf+0x2f4>
 7dc:	30 ff       	sbrs	r19, 0
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x2e0>
 7e0:	5a 2c       	mov	r5, r10
 7e2:	b3 14       	cp	r11, r3
 7e4:	18 f4       	brcc	.+6      	; 0x7ec <vfprintf+0x2e0>
 7e6:	53 0c       	add	r5, r3
 7e8:	5b 18       	sub	r5, r11
 7ea:	b3 2c       	mov	r11, r3
 7ec:	b3 14       	cp	r11, r3
 7ee:	60 f4       	brcc	.+24     	; 0x808 <vfprintf+0x2fc>
 7f0:	b7 01       	movw	r22, r14
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	3c 87       	std	Y+12, r19	; 0x0c
 7f8:	62 d0       	rcall	.+196    	; 0x8be <fputc>
 7fa:	b3 94       	inc	r11
 7fc:	3c 85       	ldd	r19, Y+12	; 0x0c
 7fe:	f6 cf       	rjmp	.-20     	; 0x7ec <vfprintf+0x2e0>
 800:	b3 14       	cp	r11, r3
 802:	10 f4       	brcc	.+4      	; 0x808 <vfprintf+0x2fc>
 804:	3b 18       	sub	r3, r11
 806:	01 c0       	rjmp	.+2      	; 0x80a <vfprintf+0x2fe>
 808:	31 2c       	mov	r3, r1
 80a:	34 ff       	sbrs	r19, 4
 80c:	11 c0       	rjmp	.+34     	; 0x830 <vfprintf+0x324>
 80e:	b7 01       	movw	r22, r14
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	3c 87       	std	Y+12, r19	; 0x0c
 816:	53 d0       	rcall	.+166    	; 0x8be <fputc>
 818:	3c 85       	ldd	r19, Y+12	; 0x0c
 81a:	32 ff       	sbrs	r19, 2
 81c:	16 c0       	rjmp	.+44     	; 0x84a <vfprintf+0x33e>
 81e:	31 fd       	sbrc	r19, 1
 820:	03 c0       	rjmp	.+6      	; 0x828 <vfprintf+0x31c>
 822:	88 e7       	ldi	r24, 0x78	; 120
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0x320>
 828:	88 e5       	ldi	r24, 0x58	; 88
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	b7 01       	movw	r22, r14
 82e:	0c c0       	rjmp	.+24     	; 0x848 <vfprintf+0x33c>
 830:	83 2f       	mov	r24, r19
 832:	86 78       	andi	r24, 0x86	; 134
 834:	51 f0       	breq	.+20     	; 0x84a <vfprintf+0x33e>
 836:	31 ff       	sbrs	r19, 1
 838:	02 c0       	rjmp	.+4      	; 0x83e <vfprintf+0x332>
 83a:	8b e2       	ldi	r24, 0x2B	; 43
 83c:	01 c0       	rjmp	.+2      	; 0x840 <vfprintf+0x334>
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	37 fd       	sbrc	r19, 7
 842:	8d e2       	ldi	r24, 0x2D	; 45
 844:	b7 01       	movw	r22, r14
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	3a d0       	rcall	.+116    	; 0x8be <fputc>
 84a:	a5 14       	cp	r10, r5
 84c:	30 f4       	brcc	.+12     	; 0x85a <vfprintf+0x34e>
 84e:	b7 01       	movw	r22, r14
 850:	80 e3       	ldi	r24, 0x30	; 48
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	34 d0       	rcall	.+104    	; 0x8be <fputc>
 856:	5a 94       	dec	r5
 858:	f8 cf       	rjmp	.-16     	; 0x84a <vfprintf+0x33e>
 85a:	aa 94       	dec	r10
 85c:	f4 01       	movw	r30, r8
 85e:	ea 0d       	add	r30, r10
 860:	f1 1d       	adc	r31, r1
 862:	80 81       	ld	r24, Z
 864:	b7 01       	movw	r22, r14
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	2a d0       	rcall	.+84     	; 0x8be <fputc>
 86a:	a1 10       	cpse	r10, r1
 86c:	f6 cf       	rjmp	.-20     	; 0x85a <vfprintf+0x34e>
 86e:	33 20       	and	r3, r3
 870:	09 f4       	brne	.+2      	; 0x874 <vfprintf+0x368>
 872:	5d ce       	rjmp	.-838    	; 0x52e <vfprintf+0x22>
 874:	b7 01       	movw	r22, r14
 876:	80 e2       	ldi	r24, 0x20	; 32
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	21 d0       	rcall	.+66     	; 0x8be <fputc>
 87c:	3a 94       	dec	r3
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <vfprintf+0x362>
 880:	f7 01       	movw	r30, r14
 882:	86 81       	ldd	r24, Z+6	; 0x06
 884:	97 81       	ldd	r25, Z+7	; 0x07
 886:	02 c0       	rjmp	.+4      	; 0x88c <vfprintf+0x380>
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	2c 96       	adiw	r28, 0x0c	; 12
 88e:	e2 e1       	ldi	r30, 0x12	; 18
 890:	c8 c0       	rjmp	.+400    	; 0xa22 <__epilogue_restores__>

00000892 <strnlen_P>:
 892:	fc 01       	movw	r30, r24
 894:	05 90       	lpm	r0, Z+
 896:	61 50       	subi	r22, 0x01	; 1
 898:	70 40       	sbci	r23, 0x00	; 0
 89a:	01 10       	cpse	r0, r1
 89c:	d8 f7       	brcc	.-10     	; 0x894 <strnlen_P+0x2>
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	8e 0f       	add	r24, r30
 8a4:	9f 1f       	adc	r25, r31
 8a6:	08 95       	ret

000008a8 <strnlen>:
 8a8:	fc 01       	movw	r30, r24
 8aa:	61 50       	subi	r22, 0x01	; 1
 8ac:	70 40       	sbci	r23, 0x00	; 0
 8ae:	01 90       	ld	r0, Z+
 8b0:	01 10       	cpse	r0, r1
 8b2:	d8 f7       	brcc	.-10     	; 0x8aa <strnlen+0x2>
 8b4:	80 95       	com	r24
 8b6:	90 95       	com	r25
 8b8:	8e 0f       	add	r24, r30
 8ba:	9f 1f       	adc	r25, r31
 8bc:	08 95       	ret

000008be <fputc>:
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	fb 01       	movw	r30, r22
 8c8:	23 81       	ldd	r18, Z+3	; 0x03
 8ca:	21 fd       	sbrc	r18, 1
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <fputc+0x16>
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	9f ef       	ldi	r25, 0xFF	; 255
 8d2:	28 c0       	rjmp	.+80     	; 0x924 <fputc+0x66>
 8d4:	22 ff       	sbrs	r18, 2
 8d6:	16 c0       	rjmp	.+44     	; 0x904 <fputc+0x46>
 8d8:	46 81       	ldd	r20, Z+6	; 0x06
 8da:	57 81       	ldd	r21, Z+7	; 0x07
 8dc:	24 81       	ldd	r18, Z+4	; 0x04
 8de:	35 81       	ldd	r19, Z+5	; 0x05
 8e0:	42 17       	cp	r20, r18
 8e2:	53 07       	cpc	r21, r19
 8e4:	44 f4       	brge	.+16     	; 0x8f6 <fputc+0x38>
 8e6:	a0 81       	ld	r26, Z
 8e8:	b1 81       	ldd	r27, Z+1	; 0x01
 8ea:	9d 01       	movw	r18, r26
 8ec:	2f 5f       	subi	r18, 0xFF	; 255
 8ee:	3f 4f       	sbci	r19, 0xFF	; 255
 8f0:	31 83       	std	Z+1, r19	; 0x01
 8f2:	20 83       	st	Z, r18
 8f4:	8c 93       	st	X, r24
 8f6:	26 81       	ldd	r18, Z+6	; 0x06
 8f8:	37 81       	ldd	r19, Z+7	; 0x07
 8fa:	2f 5f       	subi	r18, 0xFF	; 255
 8fc:	3f 4f       	sbci	r19, 0xFF	; 255
 8fe:	37 83       	std	Z+7, r19	; 0x07
 900:	26 83       	std	Z+6, r18	; 0x06
 902:	10 c0       	rjmp	.+32     	; 0x924 <fputc+0x66>
 904:	eb 01       	movw	r28, r22
 906:	09 2f       	mov	r16, r25
 908:	18 2f       	mov	r17, r24
 90a:	00 84       	ldd	r0, Z+8	; 0x08
 90c:	f1 85       	ldd	r31, Z+9	; 0x09
 90e:	e0 2d       	mov	r30, r0
 910:	09 95       	icall
 912:	89 2b       	or	r24, r25
 914:	e1 f6       	brne	.-72     	; 0x8ce <fputc+0x10>
 916:	8e 81       	ldd	r24, Y+6	; 0x06
 918:	9f 81       	ldd	r25, Y+7	; 0x07
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	9f 83       	std	Y+7, r25	; 0x07
 91e:	8e 83       	std	Y+6, r24	; 0x06
 920:	81 2f       	mov	r24, r17
 922:	90 2f       	mov	r25, r16
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <__ultoa_invert>:
 92e:	fa 01       	movw	r30, r20
 930:	aa 27       	eor	r26, r26
 932:	28 30       	cpi	r18, 0x08	; 8
 934:	51 f1       	breq	.+84     	; 0x98a <__ultoa_invert+0x5c>
 936:	20 31       	cpi	r18, 0x10	; 16
 938:	81 f1       	breq	.+96     	; 0x99a <__ultoa_invert+0x6c>
 93a:	e8 94       	clt
 93c:	6f 93       	push	r22
 93e:	6e 7f       	andi	r22, 0xFE	; 254
 940:	6e 5f       	subi	r22, 0xFE	; 254
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	8f 4f       	sbci	r24, 0xFF	; 255
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	af 4f       	sbci	r26, 0xFF	; 255
 94a:	b1 e0       	ldi	r27, 0x01	; 1
 94c:	3e d0       	rcall	.+124    	; 0x9ca <__ultoa_invert+0x9c>
 94e:	b4 e0       	ldi	r27, 0x04	; 4
 950:	3c d0       	rcall	.+120    	; 0x9ca <__ultoa_invert+0x9c>
 952:	67 0f       	add	r22, r23
 954:	78 1f       	adc	r23, r24
 956:	89 1f       	adc	r24, r25
 958:	9a 1f       	adc	r25, r26
 95a:	a1 1d       	adc	r26, r1
 95c:	68 0f       	add	r22, r24
 95e:	79 1f       	adc	r23, r25
 960:	8a 1f       	adc	r24, r26
 962:	91 1d       	adc	r25, r1
 964:	a1 1d       	adc	r26, r1
 966:	6a 0f       	add	r22, r26
 968:	71 1d       	adc	r23, r1
 96a:	81 1d       	adc	r24, r1
 96c:	91 1d       	adc	r25, r1
 96e:	a1 1d       	adc	r26, r1
 970:	20 d0       	rcall	.+64     	; 0x9b2 <__ultoa_invert+0x84>
 972:	09 f4       	brne	.+2      	; 0x976 <__ultoa_invert+0x48>
 974:	68 94       	set
 976:	3f 91       	pop	r19
 978:	2a e0       	ldi	r18, 0x0A	; 10
 97a:	26 9f       	mul	r18, r22
 97c:	11 24       	eor	r1, r1
 97e:	30 19       	sub	r19, r0
 980:	30 5d       	subi	r19, 0xD0	; 208
 982:	31 93       	st	Z+, r19
 984:	de f6       	brtc	.-74     	; 0x93c <__ultoa_invert+0xe>
 986:	cf 01       	movw	r24, r30
 988:	08 95       	ret
 98a:	46 2f       	mov	r20, r22
 98c:	47 70       	andi	r20, 0x07	; 7
 98e:	40 5d       	subi	r20, 0xD0	; 208
 990:	41 93       	st	Z+, r20
 992:	b3 e0       	ldi	r27, 0x03	; 3
 994:	0f d0       	rcall	.+30     	; 0x9b4 <__ultoa_invert+0x86>
 996:	c9 f7       	brne	.-14     	; 0x98a <__ultoa_invert+0x5c>
 998:	f6 cf       	rjmp	.-20     	; 0x986 <__ultoa_invert+0x58>
 99a:	46 2f       	mov	r20, r22
 99c:	4f 70       	andi	r20, 0x0F	; 15
 99e:	40 5d       	subi	r20, 0xD0	; 208
 9a0:	4a 33       	cpi	r20, 0x3A	; 58
 9a2:	18 f0       	brcs	.+6      	; 0x9aa <__ultoa_invert+0x7c>
 9a4:	49 5d       	subi	r20, 0xD9	; 217
 9a6:	31 fd       	sbrc	r19, 1
 9a8:	40 52       	subi	r20, 0x20	; 32
 9aa:	41 93       	st	Z+, r20
 9ac:	02 d0       	rcall	.+4      	; 0x9b2 <__ultoa_invert+0x84>
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__ultoa_invert+0x6c>
 9b0:	ea cf       	rjmp	.-44     	; 0x986 <__ultoa_invert+0x58>
 9b2:	b4 e0       	ldi	r27, 0x04	; 4
 9b4:	a6 95       	lsr	r26
 9b6:	97 95       	ror	r25
 9b8:	87 95       	ror	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	ba 95       	dec	r27
 9c0:	c9 f7       	brne	.-14     	; 0x9b4 <__ultoa_invert+0x86>
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	61 05       	cpc	r22, r1
 9c6:	71 05       	cpc	r23, r1
 9c8:	08 95       	ret
 9ca:	9b 01       	movw	r18, r22
 9cc:	ac 01       	movw	r20, r24
 9ce:	0a 2e       	mov	r0, r26
 9d0:	06 94       	lsr	r0
 9d2:	57 95       	ror	r21
 9d4:	47 95       	ror	r20
 9d6:	37 95       	ror	r19
 9d8:	27 95       	ror	r18
 9da:	ba 95       	dec	r27
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__ultoa_invert+0xa2>
 9de:	62 0f       	add	r22, r18
 9e0:	73 1f       	adc	r23, r19
 9e2:	84 1f       	adc	r24, r20
 9e4:	95 1f       	adc	r25, r21
 9e6:	a0 1d       	adc	r26, r0
 9e8:	08 95       	ret

000009ea <__prologue_saves__>:
 9ea:	2f 92       	push	r2
 9ec:	3f 92       	push	r3
 9ee:	4f 92       	push	r4
 9f0:	5f 92       	push	r5
 9f2:	6f 92       	push	r6
 9f4:	7f 92       	push	r7
 9f6:	8f 92       	push	r8
 9f8:	9f 92       	push	r9
 9fa:	af 92       	push	r10
 9fc:	bf 92       	push	r11
 9fe:	cf 92       	push	r12
 a00:	df 92       	push	r13
 a02:	ef 92       	push	r14
 a04:	ff 92       	push	r15
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	ca 1b       	sub	r28, r26
 a14:	db 0b       	sbc	r29, r27
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	09 94       	ijmp

00000a22 <__epilogue_restores__>:
 a22:	2a 88       	ldd	r2, Y+18	; 0x12
 a24:	39 88       	ldd	r3, Y+17	; 0x11
 a26:	48 88       	ldd	r4, Y+16	; 0x10
 a28:	5f 84       	ldd	r5, Y+15	; 0x0f
 a2a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a2c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a2e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a30:	9b 84       	ldd	r9, Y+11	; 0x0b
 a32:	aa 84       	ldd	r10, Y+10	; 0x0a
 a34:	b9 84       	ldd	r11, Y+9	; 0x09
 a36:	c8 84       	ldd	r12, Y+8	; 0x08
 a38:	df 80       	ldd	r13, Y+7	; 0x07
 a3a:	ee 80       	ldd	r14, Y+6	; 0x06
 a3c:	fd 80       	ldd	r15, Y+5	; 0x05
 a3e:	0c 81       	ldd	r16, Y+4	; 0x04
 a40:	1b 81       	ldd	r17, Y+3	; 0x03
 a42:	aa 81       	ldd	r26, Y+2	; 0x02
 a44:	b9 81       	ldd	r27, Y+1	; 0x01
 a46:	ce 0f       	add	r28, r30
 a48:	d1 1d       	adc	r29, r1
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	ed 01       	movw	r28, r26
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
